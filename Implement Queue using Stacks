typedef struct {
    int* list;
    int rtop;
    int ltop;

    size_t count;
} MyQueue;


MyQueue* myQueueCreate() {
    MyQueue* que = (MyQueue*)malloc(sizeof(MyQueue));
    que->list = (int*)malloc(sizeof(int)*100);
    que->rtop = -1;
    que->ltop = -1;
    que->count = 0;
    return que;
}

void myQueuePush(MyQueue* obj, int x) {
    obj->list[++(obj->rtop)] = x;
    if(obj->ltop < 0)
        obj->ltop++;
    obj->count++;
}

int myQueuePop(MyQueue* obj) {
    obj->count--;
    int pop_val = obj->list[obj->ltop];
    obj->ltop++;
    return pop_val;    
}

int myQueuePeek(MyQueue* obj) {
    return obj->list[obj->ltop];
}

bool myQueueEmpty(MyQueue* obj) {
    return obj->count == 0;
}

void myQueueFree(MyQueue* obj) {
    free(obj->list);
    free(obj);
}


/**
 * Your MyQueue struct will be instantiated and called as such:
 * MyQueue* obj = myQueueCreate();
 * myQueuePush(obj, x);
 
 * int param_2 = myQueuePop(obj);
 
 * int param_3 = myQueuePeek(obj);
 
 * bool param_4 = myQueueEmpty(obj);
 
 * myQueueFree(obj);
*/
